// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int                      @id @default(autoincrement())
  username        String                   @unique
  email           String                   @unique
  password        String
  bio             String?
  avatar          String?
  role            String                   @default("user")
  created_at      DateTime                 @default(now())
  updated_at      DateTime                 @updatedAt
  notifications   Notifications[]
  favorites       FavoritesOnUsers[]
  watchlist       WatchlistOnUsers[]
  top5            Top5OnUsers[]
  recommandations RecommandationsOnUsers[]
  calendars       Calendars[]
  claims          Claims[]
}

model Notifications {
  id         Int      @id @default(autoincrement())
  title      String
  data       Json
  isRead     Boolean
  created_at DateTime @default(now())
  users      Users    @relation(fields: [userId], references: [id])
  userId     Int
}

model Favorites {
  id         Int                @id @default(autoincrement())
  animes_ids Json
  users      FavoritesOnUsers[]
}

model FavoritesOnUsers {
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int
  favorite   Favorites @relation(fields: [favoriteId], references: [id])
  favoriteId Int
  assignedAt DateTime  @default(now())
  assignedBy String

  @@id([userId, favoriteId])
}

model Watchlist {
  id         Int                @id @default(autoincrement())
  animes_ids Json
  users      WatchlistOnUsers[]
}

model WatchlistOnUsers {
  user        Users     @relation(fields: [userId], references: [id])
  userId      Int
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id])
  watchlistId Int
  assignedAt  DateTime  @default(now())
  assignedBy  String

  @@id([userId, watchlistId])
}

model Top5 {
  id         Int           @id @default(autoincrement())
  animes_ids Json
  users      Top5OnUsers[]
}

model Top5OnUsers {
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  top5       Top5     @relation(fields: [top5Id], references: [id])
  top5Id     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, top5Id])
}

model Recommandations {
  id         Int                      @id @default(autoincrement())
  animes_ids Json
  users      RecommandationsOnUsers[]
}

model RecommandationsOnUsers {
  user             Users           @relation(fields: [userId], references: [id])
  userId           Int
  recommandation   Recommandations @relation(fields: [recommandationId], references: [id])
  recommandationId Int
  assignedAt       DateTime        @default(now())
  assignedBy       String

  @@id([userId, recommandationId])
}

model Calendars {
  id                  Int                @id @default(autoincrement())
  data                Json
  created_at          DateTime           @default(now())
  users               Users              @relation(fields: [userId], references: [id])
  userId              Int                @unique
  streamingPlatforms  StreamingPlatforms @relation(fields: [streamingPlatformid], references: [id])
  streamingPlatformid Int                @unique
}

model StreamingPlatforms {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  api_url     String
  logo        String
  calendar    Calendars[]
}

model Claims {
  id       Int      @id @default(autoincrement())
  claim_at DateTime @default(now())
  users    Users    @relation(fields: [userId], references: [id])
  userId   Int      @unique
  Rewards  Rewards  @relation(fields: [rewardId], references: [id])
  rewardId Int      @unique
}

model Rewards {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  badge       String
  condition   Int
  claims      Claims[]
  types       Types    @relation(fields: [typeId], references: [id])
  typeId      Int      @unique
}

model Types {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  rewards     Rewards[]
}
